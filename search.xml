<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Godot4.0 学习日记01--Godot引擎介绍</title>
      <link href="/2023/02/17/Godot4-0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B001-Godot%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/02/17/Godot4-0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B001-Godot%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[        <h1 id="Godot-引擎介绍"   >          <a href="#Godot-引擎介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Godot-引擎介绍" class="headerlink" title="Godot 引擎介绍"></a>Godot 引擎介绍</h1>              <h2 id="需要掌握的内容"   >          <a href="#需要掌握的内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#需要掌握的内容" class="headerlink" title="需要掌握的内容"></a>需要掌握的内容</h2>      <ul><li>大致了解游戏引擎的<strong>开发思想</strong>与工作流程。</li><li>了解如何使用引擎内置的编码来编写自己期望的游戏内容。</li><li>了解并熟悉引擎的内部操作。（主要是多操作多联系）</li></ul>        <h2 id="Godot-的开发思想——围绕节点"   >          <a href="#Godot-的开发思想——围绕节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Godot-的开发思想——围绕节点" class="headerlink" title="Godot 的开发思想——围绕节点"></a>Godot 的开发思想——围绕节点</h2>      <ol><li>节点的特征和优势<ul><li>节点是 Godot 内最常用最基本的开发组件。</li><li>大部分的节点都具有非常具体的功能，往往能够直接涉及到人类的视听感官，比如显示图片、播放音乐、显示模型、模拟物理世界等等。</li><li>节点之间可以用上下级的方式组合在一起，一个节点也可以有多个子节点。</li><li>节点的开发思想与人类是相接近的。</li></ul></li><li>场景树与服务器控制节点运行<ul><li>场景树是游戏的主循环对象，只有在<strong>树</strong>下的节点才可以正常使用节点的主要功能，节点初始化时并不在<strong>树</strong>下。</li><li><strong>服务器</strong>指的是 Godot 内置的各类 Server，节点的主要功能都需要使用 Server 实现，节点本身并不具备实际的功能，二者通过场景树进行协调沟通。</li><li><strong>服务器</strong>的编码比较接近底层，保障了游戏运行的效率，节点的设计思路比较接近人类，加速了开发者开发游戏的效率，场景树起到了协调两者的作用。</li></ul></li><li>节点的组织方式——场景<ul><li>场景是若干节点的集合。</li><li>场景文件是记录若干节点集合的文件。</li><li>游戏实际运行时不存在<strong>场景</strong>，场景是节点在文件系统中储存和加载的单位。</li><li>游戏式从主场景开始运行的。</li></ul></li><li>Godot 软件的界面介绍——围绕节点<ul><li>场景栏：显示场景内的节点，可以在这里增删一个场景内的节点，也可以为节点附加脚本。</li><li>文件系统：显示场景文件与游戏素材文件。</li><li>视图区：预览场景内的可视节点，上方可以切换视图，分为代码编写区和素材库。</li><li>检查器：显示节点的属性，包括节点的信号连接、节点组情况与游戏素材文件的属性。</li></ul></li></ol>        <h2 id="Godot-的原生语言——GDScript"   >          <a href="#Godot-的原生语言——GDScript" class="heading-link"><i class="fas fa-link"></i></a><a href="#Godot-的原生语言——GDScript" class="headerlink" title="Godot 的原生语言——GDScript"></a>Godot 的原生语言——GDScript</h2>      <ol><li>GDScript 的入门介绍<ul><li>GDScript 是 Godot 的原生语言，是最适合 Godot 开发的语言。</li></ul></li><li>GDScript 与节点的关系<ul><li>节点对于电脑而言具有非常具体的功能，可以令游戏程序执行显示图片、播放音频、模拟物理体等功能，但是也仅限于此。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Godot </tag>
            
            <tag> GDScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis数据库框架</title>
      <link href="/2022/09/20/MyBatis%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/09/20/MyBatis%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[        <h1 id="MyBatis-框架初识"   >          <a href="#MyBatis-框架初识" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-框架初识" class="headerlink" title="MyBatis 框架初识"></a>MyBatis 框架初识</h1>      <img src="/2022/09/20/MyBatis%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/MyBatis_logo.png" class="" title="MyBatis"><span id="more"></span>        <h2 id="什么是-MyBatis-？"   >          <a href="#什么是-MyBatis-？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是-MyBatis-？" class="headerlink" title="什么是 MyBatis ？"></a>什么是 MyBatis ？</h2>      <ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li><li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li><li>中文文档：<span class="exturl"><a class="exturl__link"   href="https://mybatis.net.cn/index.html" >MyBatis 中文网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>GitHub：<span class="exturl"><a class="exturl__link"   href="https://github.com/mybatis/mybatis-3" >https://github.com/mybatis/mybatis-3</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="为什么需要使用-MyBatis"   >          <a href="#为什么需要使用-MyBatis" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么需要使用-MyBatis" class="headerlink" title="为什么需要使用 MyBatis"></a>为什么需要使用 MyBatis</h2>      <ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件。易于学习，易于使用。通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射。</li><li>提供对象关系映射标签，支持对象关系组建维护。</li><li>提供xml标签，支持编写动态sql。</li></ul>        <h2 id="持久化"   >          <a href="#持久化" class="heading-link"><i class="fas fa-link"></i></a><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2>      <ul><li>持久化是将程序数据在持久状态和瞬时状态间转换的机制<ul><li>就是把内存中的数据保存到可永久保存的存储设备中。主要应用就是将内存中的对象存储在数据库中。</li><li>JDBC、文件IO就是一种持久化的机制。</li></ul></li><li>为什么需要持久化服务？<ul><li>内存断电后数据会丢失，但是我们不希望一些数据丢失，但是却无法保证内存永远不断电。</li><li>内存成本比较高，就算数据不需要永久保存，也会因为内存的容量限制而不能一直放在内存中，需要持久化到外存。</li></ul></li></ul>        <h2 id="持久层"   >          <a href="#持久层" class="heading-link"><i class="fas fa-link"></i></a><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2>      <ul><li>持久层就是完成持久化工作的代码块，一般为DAO层（Data Access Object 数据访问对象）。</li><li>持久化的实现过程大多都是通过各种关系数据库来完成的。</li><li>总的来说，持久层就是用来操作数据库的。</li></ul>        <h1 id="MyBatis-的使用"   >          <a href="#MyBatis-的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-的使用" class="headerlink" title="MyBatis 的使用"></a>MyBatis 的使用</h1>              <h2 id="导入-MyBatis-（Maven）"   >          <a href="#导入-MyBatis-（Maven）" class="heading-link"><i class="fas fa-link"></i></a><a href="#导入-MyBatis-（Maven）" class="headerlink" title="导入 MyBatis （Maven）"></a>导入 MyBatis （Maven）</h2>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 另外还需要一个MySQL的连接驱动包 --&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="编写-MyBatis-核心配置文件"   >          <a href="#编写-MyBatis-核心配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#编写-MyBatis-核心配置文件" class="headerlink" title="编写 MyBatis 核心配置文件"></a>编写 MyBatis 核心配置文件</h2>      <p>mybatis-config.xml</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/worldmeqc/dao/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="编写-MyBatis-工具类"   >          <a href="#编写-MyBatis-工具类" class="heading-link"><i class="fas fa-link"></i></a><a href="#编写-MyBatis-工具类" class="headerlink" title="编写 MyBatis 工具类"></a>编写 MyBatis 工具类</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="创建实体类"   >          <a href="#创建实体类" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="编写Mapper接口"   >          <a href="#编写Mapper接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#编写Mapper接口" class="headerlink" title="编写Mapper接口"></a>编写Mapper接口</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="编写UserMapper-xml配置文件"   >          <a href="#编写UserMapper-xml配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#编写UserMapper-xml配置文件" class="headerlink" title="编写UserMapper.xml配置文件"></a>编写UserMapper.xml配置文件</h2>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace必须与Mapper接口类对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.worldmeqc.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.worldmeqc.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="测试类"   >          <a href="#测试类" class="heading-link"><i class="fas fa-link"></i></a><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2>      <p>junit测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MyBatisUtil.getSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.queryAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="可能出现的问题"   >          <a href="#可能出现的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2>              <h3 id="找不到Mapper-xml文件"   >          <a href="#找不到Mapper-xml文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#找不到Mapper-xml文件" class="headerlink" title="找不到Mapper.xml文件"></a>找不到Mapper.xml文件</h3>      <p>如果我们的UserMapper.xml文件是放在mapper包中，与Mapper接口类放在一起的话，Maven会将xml文件过滤掉，在生成的代码包中就找不到xml文件了，我们可以在pom.xml文件中添加以下代码解决问题</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h1 id="几个顶级元素标签"   >          <a href="#几个顶级元素标签" class="heading-link"><i class="fas fa-link"></i></a><a href="#几个顶级元素标签" class="headerlink" title="几个顶级元素标签"></a>几个顶级元素标签</h1>              <h2 id="select、insert、update、delete标签"   >          <a href="#select、insert、update、delete标签" class="heading-link"><i class="fas fa-link"></i></a><a href="#select、insert、update、delete标签" class="headerlink" title="select、insert、update、delete标签"></a>select、insert、update、delete标签</h2>      <p>其中有很多属性可以详细配置每一条SQL语句</p><ul><li><p>id</p><ul><li>命名空间中唯一的标识符，并且与接口中的方法名对应</li></ul></li><li><p>parameterType</p><ul><li>传入SQL语句的参数类型，如int</li></ul></li><li><p>resultType</p><ul><li>SQL语句返回值类型（完整的类名或者别名），如果返回集合应设置为集合中存放的元素类型。</li></ul></li><li><p>resultMap</p><ul><li>结果映射，可以解决实体属性名与列名不一致的问题</li><li>可以在外部配置一个resultMap，然后在引用它的语句中设置resultMap属性就行</li></ul></li><li><p>flushCache</p><ul><li>设置为true时，只要语句被调用了，本地缓存和二级缓存会被清空</li><li>默认值为false</li></ul></li><li><p>useCache</p><ul><li>设置为true时，本条语句的结果会被二级缓存储存</li><li>默认值 对于select为true，其他为false</li></ul></li><li><p>useGeneratedKeys（适用于 insert 和 update ）</p><ul><li>设置为true时，会使用JDBC的getGeneratedKeys方法取出由数据库内部生成的主键</li><li>默认值为false</li></ul></li><li><p>keyProperty（适用于 insert 和 update ）</p><ul><li>指定能够唯一识别对象的属性，Mybatis会使用getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值</li><li>默认值未设置，如果生成列不止一个，可以用逗号隔开</li></ul></li></ul>        <h2 id="sql标签"   >          <a href="#sql标签" class="heading-link"><i class="fas fa-link"></i></a><a href="#sql标签" class="headerlink" title="sql标签"></a>sql标签</h2>      <p>这个元素可以用来定义可以重用的SQL代码片段，方便在其他语句中使用。其中的参数可以在加载的时候确定下来，还可以在不同的使用中定义不同的参数值。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span></span><br><span class="line">    $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>上面的代码块可以在其他地方使用</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t1&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t2&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="resultMap标签"   >          <a href="#resultMap标签" class="heading-link"><i class="fas fa-link"></i></a><a href="#resultMap标签" class="headerlink" title="resultMap标签"></a>resultMap标签</h2>      <p>这个标签是MyBatis中最重要的最强大的元素标签：结果映射</p><p>示例：</p><p>一个简单的实体类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.someapp.model;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String hashedPassword;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHashedPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hashedPassword;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHashedPassword</span><span class="params">(String hashedPassword)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hashedPassword = hashedPassword;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>基于JavaBean的规范，上面的类有三个属性，分别是id，username，hashedPassword</p><p>这样的一个JavaBean可以被映射到ResultSet</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.someapp.model.User&quot;</span>&gt;</span></span><br><span class="line">    select id, username, hashedPassword</span><br><span class="line">    from some_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>我们可以使用resultMap来解决列名不匹配的问题，比如上述resultMap修改为</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hashed_password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>然后在引用它的语句中设置resultMap属性就好了（注意去掉resultType属性）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select user_id, user_name, hashed_password</span><br><span class="line">    from some_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>下面是一些resultMap的元素标签</p><ul><li>id<ul><li>一个ID结果，标记出作为ID的结果可以帮助提高整体性能</li></ul></li><li>result<ul><li>注入到字段或JavaBean中属性的普通结果</li></ul></li><li>association<ul><li>一个复杂类型的关联，许多结果会包装成这种类型</li><li>嵌套的结果映射：关联可以是resultMap元素或是对其他结果映射的引用</li></ul></li><li>collection<ul><li>一个复杂类型的集合</li><li>嵌套的结果映射：关联可以是resultMap元素或是对其他结果映射的引用</li></ul></li><li>discriminator<ul><li>case 基于某些值的结果映射<ul><li>嵌套的结果映射：case也是一个结果映射所以具有相同的结构和元素或是对其他结果映射的引用</li></ul></li></ul></li><li>constructor<ul><li>用于在实例化类时，注入结果到构造方法中</li><li>idArg：ID参数，标记出作为ID的结果</li><li>arg：将被注入到构造方法的一个普通结果</li></ul></li></ul>        <h2 id="resultMap的元素标签的属性"   >          <a href="#resultMap的元素标签的属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#resultMap的元素标签的属性" class="headerlink" title="resultMap的元素标签的属性"></a>resultMap的元素标签的属性</h2>      <ul><li>id &amp; result<ul><li>这是结果映射的基础，会将一个列的值映射到一个简单数据类型的属性或字段</li><li>id对应的属性会被标记为对象的标识符，在比较对象实例时使用，可以提高性能</li><li>属性<ul><li>property：映射到列结果的字段或属性，优先寻找JavaBean中的属性</li><li>column：数据库中的列名或是列的别名</li><li>javaType：一个Java类的全限定名或是类型别名（内置）</li><li>jdbcType：JDBC类型，只需要在可能执行插入更新删除且允许空值的列上指定JDBC类型，这是JDBC的要求</li></ul></li></ul></li><li>内置的jdbcType</li></ul><div class="table-container"><table><thead><tr><th align="center"><strong>BIT</strong></th><th align="center"><strong>FLOAT</strong></th><th align="center"><strong>CHAR</strong></th></tr></thead><tbody><tr><td align="center"><strong>TIMESTAMP</strong></td><td align="center"><strong>OTHER</strong></td><td align="center"><strong>UNDEFINED</strong></td></tr><tr><td align="center"><strong>TINYINT</strong></td><td align="center"><strong>REAL</strong></td><td align="center"><strong>VARCHAR</strong></td></tr><tr><td align="center"><strong>BINARY</strong></td><td align="center"><strong>BLOB</strong></td><td align="center"><strong>NVARCHAR</strong></td></tr><tr><td align="center"><strong>SMALLINT</strong></td><td align="center"><strong>DOUBLE</strong></td><td align="center"><strong>LONGVARCHAR</strong></td></tr><tr><td align="center"><strong>VARBINARY</strong></td><td align="center"><strong>CLOB</strong></td><td align="center"><strong>NCHAR</strong></td></tr><tr><td align="center"><strong>INTEGER</strong></td><td align="center"><strong>NUMERIC</strong></td><td align="center"><strong>DATE</strong></td></tr><tr><td align="center"><strong>LONGVARBINARY</strong></td><td align="center"><strong>BOOLEAN</strong></td><td align="center"><strong>NVLOB</strong></td></tr><tr><td align="center"><strong>BIGINT</strong></td><td align="center"><strong>DECIMAL</strong></td><td align="center"><strong>TIME</strong></td></tr><tr><td align="center"><strong>NULL</strong></td><td align="center"><strong>CURSOR</strong></td><td align="center"><strong>ARRAY</strong></td></tr></tbody></table></div><ul><li>association<ul><li>关联元素主要处理一对一类型的关系。比如一篇博客有一个作者</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery的使用</title>
      <link href="/2022/08/14/JQuery%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/14/JQuery%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[        <h1 id="初识-jQuery"   >          <a href="#初识-jQuery" class="heading-link"><i class="fas fa-link"></i></a><a href="#初识-jQuery" class="headerlink" title="初识 jQuery"></a>初识 jQuery</h1>              <h2 id="什么是-jQuery-？"   >          <a href="#什么是-jQuery-？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是-jQuery-？" class="headerlink" title="什么是 jQuery ？"></a>什么是 jQuery ？</h2>      <p>jQuery 是一个高效、精简并且功能丰富的 JavaScript 工具库。它提供的 API 易于使用且兼容众多浏览器，这让诸如 HTML 文档遍历和操作、事件处理、动画和 Ajax 操作更加简单。<span id="more"></span></p><p><strong>优势</strong>：</p><ul><li>轻量级。体积小，不会影响页面加载速度</li><li>强大的选择器</li><li>方便的选择页面元素（模仿 css 选择器更精确、更灵活）</li><li>出色的 DOM 操作的封装</li><li>对事件、样式、动画支持，大大简化了 DOM 操作</li><li>跨浏览器兼容。基本兼容了现在主流的浏览器</li><li>链式操作、隐式迭代</li><li>支持插件扩展开发。有着丰富的第三方插件。</li><li>免费、开源</li></ul>        <h1 id="jQuery-基本使用"   >          <a href="#jQuery-基本使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-基本使用" class="headerlink" title="jQuery 基本使用"></a>jQuery 基本使用</h1>              <h2 id="jQuery-下载"   >          <a href="#jQuery-下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-下载" class="headerlink" title="jQuery 下载"></a>jQuery 下载</h2>      <p>① 官网地址：<span class="exturl"><a class="exturl__link"   href="https://jquery.com/" >jQuery</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>② 版本区别：</p><ul><li>1x：兼容IE678，使用最为广泛，官网只做BUG维护，功能不再新增。因此一般项目来说，使用1.X版本就可以了。</li><li>2x：不兼容IE678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x。(过渡)</li><li>3x：不兼容IE678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。</li></ul><p>③ 文档：<span class="exturl"><a class="exturl__link"   href="https://www.jquery123.com/" >jQuery API 中文文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="导入方式"   >          <a href="#导入方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#导入方式" class="headerlink" title="导入方式"></a>导入方式</h2>      <p>方式一：本地导入<br>直接在需要使用 jQuery 的页面引入 js 文件：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jQuery.js 文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>方式二：在线导入<br>我们可以通过在 script 的 src 属性中写一个网址来导入在线的 jquery 代码：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.jquery.com/jquery-latest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="jQuery-的入口函数"   >          <a href="#jQuery-的入口函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-的入口函数" class="headerlink" title="jQuery 的入口函数"></a>jQuery 的入口函数</h2>      <ul><li>JS 入口函数会在 DOM 元素加载完毕并且图片也加载完毕之后再执行</li><li>jQuery 入口函数会等到 DOM 元素加载完毕，但不会等到图片加载完毕再执行</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello jquery&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">jQuery</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello jquery&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化方式，推荐</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hi jquery&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">jQuery</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hi jquery&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h2 id="jQuery-的顶级对象"   >          <a href="#jQuery-的顶级对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-的顶级对象" class="headerlink" title="jQuery 的顶级对象 $"></a>jQuery 的顶级对象 $</h2>      <ul><li><code>$</code>是 jQuery 的别称，在代码中可以使用<code> jQuery</code> 代替<code>$</code>，但为了方便，通常都使用<code>$</code>。</li><li>冲突——<strong>多库共存</strong><br>原因：随着jQuery的流行，采用<code>jQuery</code>和<code>$</code>符为命名空间的 js 库越来越多，当然 jQuery 的<code>$</code>符也是参照的 Prototype库的，所以当多个库同时以<code>$</code>符或者<code> jQuery</code> 为命名空间时，那么此时，就会产生冲突。<br>解决方法：</li></ul><ol><li>释放使用权<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line"><span class="comment">//1.释放操作在其他函数之前</span></span><br><span class="line"><span class="comment">//2.释放后不能用dollar符</span></span><br></pre></td></tr></table></div></figure></li><li>修改访问符号<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> suiBian = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line"><span class="comment">//此时suiBian为新的访问符号</span></span><br></pre></td></tr></table></div></figure></li></ol>        <h2 id="DOM对象-和-jQuery-对象"   >          <a href="#DOM对象-和-jQuery-对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#DOM对象-和-jQuery-对象" class="headerlink" title="DOM对象 和 jQuery 对象"></a>DOM对象 和 jQuery 对象</h2>      <p>DOM 对象：用原生 js 获取过来的对象就是 DOM 对象。</p><p>jQuery 对象：用 jQuery 方式获取过来的对象就是 jQuery 对象。本质：通过 $ 把 DOM 元素进行了封装（伪数组形式存储）。</p><p><strong>区别</strong>：jQuery 对象只能使用 jQuery 方法，反之亦然。</p><p>相互转换：<br>DOM –&gt; jQuery</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;DOM对象&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>jQuery –&gt; DOM（两种方式）</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;DOM对象&#x27;</span>)[index]; <span class="comment">// index 是索引号</span></span><br><span class="line">$(<span class="string">&#x27;DOM对象&#x27;</span>).<span class="title function_">get</span>(index);</span><br></pre></td></tr></table></div></figure>        <h1 id="jQuery-常用-API"   >          <a href="#jQuery-常用-API" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-常用-API" class="headerlink" title="jQuery 常用 API"></a>jQuery 常用 API</h1>              <h2 id="jQuery-选择器"   >          <a href="#jQuery-选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2>              <h3 id="jQuery-基础选择器"   >          <a href="#jQuery-基础选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-基础选择器" class="headerlink" title="jQuery 基础选择器"></a>jQuery 基础选择器</h3>      <p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;css选择器&quot;</span>);<span class="comment">//与css选择器格式一致</span></span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ID选择器</td><td align="center">$(“#id”);</td><td align="center">获取指定 ID 的元素</td></tr><tr><td align="center">类选择器</td><td align="center">$(“.class”);</td><td align="center">获取同一类 class 的元素</td></tr><tr><td align="center">标签选择器</td><td align="center">$(“div”);</td><td align="center">获取同一类标签的所有元素</td></tr><tr><td align="center">并集选择器</td><td align="center">$(“div,li,p”);</td><td align="center">使用逗号分隔，获取多个元素</td></tr><tr><td align="center">交集选择器</td><td align="center">$(“div.show”);</td><td align="center">获取 class 为 show 的 div 元素</td></tr><tr><td align="center">全选选择器</td><td align="center">$(“*”);</td><td align="center">匹配所有元素</td></tr></tbody></table></div>        <h3 id="jQuery-层级选择器"   >          <a href="#jQuery-层级选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-层级选择器" class="headerlink" title="jQuery 层级选择器"></a>jQuery 层级选择器</h3>      <div class="table-container"><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">子代选择器</td><td align="center">$(“ul&gt;li”);</td><td align="center">使用 &gt; 号，获取直接子元素，并不会获取孙子层级的元素</td></tr><tr><td align="center">后代选择器</td><td align="center">$(“ul li”);</td><td align="center">使用空格，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table></div>        <h3 id="筛选选择器（方法）"   >          <a href="#筛选选择器（方法）" class="heading-link"><i class="fas fa-link"></i></a><a href="#筛选选择器（方法）" class="headerlink" title="筛选选择器（方法）"></a>筛选选择器（方法）</h3>      <blockquote><p>这些方法的功能与选择器类似，但是用法不一样，筛选选择器主要是方法。</p></blockquote><div class="table-container"><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">parent()</td><td align="center">$(“.first”).parent();</td><td align="center">查找父亲</td></tr><tr><td align="center">children(selector)</td><td align="center">$(“ul”).children(“li”)</td><td align="center">相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td align="center">find(selector)</td><td align="center">$(“ul”).find(“li”);</td><td align="center">相当于$(“ul li”)，后代选择器</td></tr><tr><td align="center">siblings(selector)</td><td align="center">$(“.first”).siblings(“li”);</td><td align="center">查找兄弟节点，不包括自己本身。</td></tr><tr><td align="center">next()</td><td align="center">$(“.first”).next();</td><td align="center">查找当前元素之后的下一个兄弟</td></tr><tr><td align="center">nextAll()</td><td align="center">$(“.first”).nextAll();</td><td align="center">查找当前元素之后的所有同辈元素</td></tr><tr><td align="center">prev()</td><td align="center">$(“.last”).prev();</td><td align="center">查找当前元素之前的上一个兄弟</td></tr><tr><td align="center">prevAll()</td><td align="center">$(“last”).prevAll();</td><td align="center">查找当前元素之前的所有同辈元素</td></tr><tr><td align="center">hasClass(class)</td><td align="center">$(“div”).hasClass(“show”)</td><td align="center">检查当前的元素是否含有某个特定的类，如果有，则返回 true</td></tr><tr><td align="center">eq(index)</td><td align="center">$(“li”).eq(2);</td><td align="center">相当于$(“li:eq(2)”)，index 从0开始</td></tr></tbody></table></div>        <h3 id="排他思想"   >          <a href="#排他思想" class="heading-link"><i class="fas fa-link"></i></a><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      $(<span class="variable language_">this</span>).<span class="title function_">css</span>();  <span class="comment">// 对自己设置变化</span></span><br><span class="line">      $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">css</span>();  <span class="comment">// 给其他兄弟去掉变化</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h3 id="链式编程"   >          <a href="#链式编程" class="heading-link"><i class="fas fa-link"></i></a><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="variable language_">this</span>).<span class="title function_">css</span>().<span class="title function_">siblings</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">css</span>();  <span class="comment">// 对自己设置变化,给其他兄弟去掉变化</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h3 id="隐式迭代"   >          <a href="#隐式迭代" class="heading-link"><i class="fas fa-link"></i></a><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h3>      <p>遍历 jQuery 对象内部 DOM 元素（伪数组形式存储）的过程就叫隐式迭代<br><strong>简单理解：给匹配的所有元素进行循环遍历，执行相应的方法，而不是我们再进行循环，简化我们的操作，方便我们的调用。</strong></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给四个div设置背景颜色为粉色 jquery对象不能使用style</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line"><span class="comment">// 隐式迭代就是把匹配的所有元素内部进行遍历循环，给每一个元素添加css这个方法</span></span><br><span class="line">$(<span class="string">&quot;ul li&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h2 id="jQuery-样式操作"   >          <a href="#jQuery-样式操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h2>              <h3 id="修改样式方法"   >          <a href="#修改样式方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改样式方法" class="headerlink" title="修改样式方法"></a>修改样式方法</h3>      <p>jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数只写属性名，则返回属性值</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"><span class="comment">//操作某一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="comment">//参数可以是对象形式，设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;20px&quot;</span>&#125;);</span><br></pre></td></tr></table></div></figure>        <h3 id="设置样式类方法"   >          <a href="#设置样式类方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置样式类方法" class="headerlink" title="设置样式类方法"></a>设置样式类方法</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>);<span class="comment">//添加类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);<span class="comment">//移除类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);<span class="comment">//添加或移除类（切换）</span></span><br></pre></td></tr></table></div></figure>        <h2 id="jQuery-属性操作"   >          <a href="#jQuery-属性操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-属性操作" class="headerlink" title="jQuery 属性操作"></a>jQuery 属性操作</h2>              <h3 id="元素的固有属性-prop"   >          <a href="#元素的固有属性-prop" class="heading-link"><i class="fas fa-link"></i></a><a href="#元素的固有属性-prop" class="headerlink" title="元素的固有属性 prop()"></a>元素的固有属性 prop()</h3>      <p>固有属性就是元素本身自带的属性，如a标签元素里面的herf，input标签元素里面的type。<br>① 获取属性语法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>② 设置属性语法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>③ 移除属性语法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeProp</span>(<span class="string">&quot;属性&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="元素的自定义属性-attr"   >          <a href="#元素的自定义属性-attr" class="heading-link"><i class="fas fa-link"></i></a><a href="#元素的自定义属性-attr" class="headerlink" title="元素的自定义属性 attr()"></a>元素的自定义属性 attr()</h3>      <p>自定义属性就是用户自己给元素添加的属性。比如给li添加index&#x3D;”1”。<br>① 获取属性语法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>② 设置属性语法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>);</span><br></pre></td></tr></table></div></figure><blockquote><p>该方法也可用于获取 H5 自定义属性。</p></blockquote><p>③ 移除属性语法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeAttr</span>(<span class="string">&quot;属性&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h2 id="jQuery-元素内容文本操作"   >          <a href="#jQuery-元素内容文本操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-元素内容文本操作" class="headerlink" title="jQuery 元素内容文本操作"></a>jQuery 元素内容文本操作</h2>              <h3 id="普通元素内容-html"   >          <a href="#普通元素内容-html" class="heading-link"><i class="fas fa-link"></i></a><a href="#普通元素内容-html" class="headerlink" title="普通元素内容 html()"></a>普通元素内容 html()</h3>      <p>相当于原生 js 中的 innerHTML</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">html</span>();  <span class="comment">// 获取元素的内容</span></span><br><span class="line"><span class="title function_">html</span>(<span class="string">&quot;内容&quot;</span>);  <span class="comment">// 设置元素的内容</span></span><br></pre></td></tr></table></div></figure>        <h3 id="普通元素文本-text"   >          <a href="#普通元素文本-text" class="heading-link"><i class="fas fa-link"></i></a><a href="#普通元素文本-text" class="headerlink" title="普通元素文本 text()"></a>普通元素文本 text()</h3>      <p>相当于原生 js 中的 innerText</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">text</span>();  <span class="comment">// 获取元素的内容</span></span><br><span class="line"><span class="title function_">text</span>(<span class="string">&quot;内容&quot;</span>);  <span class="comment">// 设置元素的内容</span></span><br></pre></td></tr></table></div></figure>        <h3 id="表单值-val"   >          <a href="#表单值-val" class="heading-link"><i class="fas fa-link"></i></a><a href="#表单值-val" class="headerlink" title="表单值 val()"></a>表单值 val()</h3>      <p>相当于原生 js 中的 value</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">val</span>();  <span class="comment">// 获取元素的内容</span></span><br><span class="line"><span class="title function_">val</span>(<span class="string">&quot;内容&quot;</span>);  <span class="comment">// 设置元素的内容</span></span><br></pre></td></tr></table></div></figure>        <h2 id="jQuery-元素操作"   >          <a href="#jQuery-元素操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-元素操作" class="headerlink" title="jQuery 元素操作"></a>jQuery 元素操作</h2>              <h3 id="遍历元素"   >          <a href="#遍历元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3>      <p>隐式迭代：对同一类元素做相同操作。如果做不同操作，需要使用遍历：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, domEle</span>) &#123;xxx;&#125;)</span><br></pre></td></tr></table></div></figure><blockquote><ul><li>index 是每个元素的索引号，domEle 是每个 DOM 元素对象，不是 jQuery 对象</li><li>想要使用 jQuery 方法，就要给这个 dom 元素转换为 jQuery 对象 $(domEle)</li></ul></blockquote>        <h3 id="创建元素"   >          <a href="#创建元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divElement = $(<span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>);<span class="comment">//创建一个div</span></span><br></pre></td></tr></table></div></figure>        <h3 id="操作元素"   >          <a href="#操作元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3>      <ul><li>append  向每个匹配的元素内部追加内容。</li><li>appendTo 把所有匹配的元素追加到另一个指定的元素元素集合中。</li><li>after 在每个匹配的元素之后插入内容。</li><li>before 在每个匹配的元素之前插入内容。</li><li>insertAfter  把所有匹配的元素插入到另一个、指定的元素元素集合的后面。</li><li>inserBefore  把所有匹配的元素插入到另一个、指定的元素元素集合的前面。</li><li>wrap  把所有匹配的元素用其他元素的结构化标记包裹起来。</li><li>unwrap  这个方法将移出元素的父元素。这能快速取消 .wrap()方法的效果。</li><li>empty  清空元素的内容。</li><li>remove  删除当前元素。</li><li>clone  复制当前元素。</li></ul>        <h2 id="jQuery-尺寸、位置操作"   >          <a href="#jQuery-尺寸、位置操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-尺寸、位置操作" class="headerlink" title="jQuery 尺寸、位置操作"></a>jQuery 尺寸、位置操作</h2>              <h3 id="jQuery-尺寸"   >          <a href="#jQuery-尺寸" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h3>      <ul><li>width()&#x2F;height()取得匹配元素宽度和高度值，只算width&#x2F;height</li><li>innerWidth()&#x2F;innerHeight()取得匹配元素宽度和高度值，包括padding</li><li>outerWidth()&#x2F;outerHeight()取得匹配元素宽度和高度值，包括padding和border</li><li>outerWidth(true)&#x2F;outerHeight(true)取得匹配元素宽度和高度值，包括padding、border和margin<ul><li>以上参数为空，则获取响应值，返回的是数字型</li><li>如果参数未数字，则是修改相应值</li><li>参数可以不写单位</li></ul></li></ul>        <h3 id="jQuery-位置"   >          <a href="#jQuery-位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-位置" class="headerlink" title="jQuery 位置"></a>jQuery 位置</h3>      <p>① offset() 设置或获取元素偏移</p><ul><li><p>offset() 方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。</p></li><li><p>该方法有2个属性 left 和 top。offset().top 用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离。</p></li><li><p>可以设置元素的偏移：offset({top:10,left:10})。</p></li></ul><p>② position() 获取元素偏移</p><ul><li>position() 方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级没有定位，则以文档为准。</li><li>该方法只能获取不能设置偏移</li></ul><p>③ scrollTop()&#x2F;scrollLeft() 设置或获取元素被卷去的头部或左侧</p><ul><li>scollTop() 方法设置或返回被选元素卷去的头部。</li><li>scollLeft() 方法设置或返回被选元素卷去的左侧。</li></ul>        <h1 id="jQuery-事件"   >          <a href="#jQuery-事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h1>              <h2 id="事件注册"   >          <a href="#事件注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h2>      <p>单个事件注册</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">element.事件(<span class="keyword">function</span>);</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; 事件处理程序 &#125;)  <span class="comment">// 其他事件和原生事件基本一致</span></span><br></pre></td></tr></table></div></figure>        <h2 id="事件处理"   >          <a href="#事件处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2>              <h3 id="绑定事件-on"   >          <a href="#绑定事件-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#绑定事件-on" class="headerlink" title="绑定事件 on()"></a>绑定事件 on()</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">on</span>(events,[selector],[data],fn)</span><br></pre></td></tr></table></div></figure><ul><li>概述<ul><li>在选择元素上绑定一个或多个事件的事件处理函数。</li><li>on() 方法绑定事件处理程序到当前选定的 jQuery 对象中的元素。</li></ul></li><li>显示参数<ul><li>events:一个或多个用空格分隔的事件类型和可选的命名空间，如”click”或”keydown.myPlugin” 。</li><li>selector:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择的&lt; null或省略，当它到达选定的元素，事件总是触发。</li><li>data:当一个事件被触发时要传递event.data给事件处理函数。</li><li>fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false。</li></ul></li></ul>        <h3 id="解绑事件-off"   >          <a href="#解绑事件-off" class="heading-link"><i class="fas fa-link"></i></a><a href="#解绑事件-off" class="headerlink" title="解绑事件 off()"></a>解绑事件 off()</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">off</span>(events,[selector],[fn])</span><br></pre></td></tr></table></div></figure><ul><li>概述<ul><li>在选择元素上移除一个或多个事件的事件处理函数。</li><li>off()方法移除用on()绑定的事件处理程序</li></ul></li><li>显示参数<ul><li>events:一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”。</li><li>selector:一个最初传递到 .on() 事件处理程序附加的选择器。</li><li>fn:事件处理程序函数以前附加事件上，或特殊值 false。</li></ul></li></ul>        <h3 id="绑定一次性事件-one"   >          <a href="#绑定一次性事件-one" class="heading-link"><i class="fas fa-link"></i></a><a href="#绑定一次性事件-one" class="headerlink" title="绑定一次性事件 one()"></a>绑定一次性事件 one()</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">one</span>(type,[data],fn)</span><br></pre></td></tr></table></div></figure><ul><li>概述<ul><li>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。</li></ul></li><li>显示参数<ul><li>type:添加到元素的一个或多个事件。由空格分隔多个事件。必须是有效的事件。</li><li>data:将要传递给事件处理函数的数据映射。</li><li>fn:每当事件触发时执行的函数。</li></ul></li></ul>        <h3 id="自动触发事件-trigger"   >          <a href="#自动触发事件-trigger" class="heading-link"><i class="fas fa-link"></i></a><a href="#自动触发事件-trigger" class="headerlink" title="自动触发事件 trigger()"></a>自动触发事件 trigger()</h3>      <p>有些事件希望自动触发，比如轮播图自动播放功能与点击右侧按钮功能一致，可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">el.<span class="title function_">click</span>();  <span class="comment">// 简写形式</span></span><br><span class="line">el.<span class="title function_">trigger</span>(<span class="string">&quot;type&quot;</span>);  <span class="comment">// 自动触发形式</span></span><br><span class="line">el.<span class="title function_">triggerHandler</span>(<span class="string">&quot;type&quot;</span>);  <span class="comment">// 自动触发形式，不会触发元素的默认行为</span></span><br></pre></td></tr></table></div></figure>        <h2 id="事件对象"   >          <a href="#事件对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2>      <p>事件被触发，就会有事件对象的产生。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title function_">on</span>(events,[selector],<span class="keyword">function</span>(<span class="params">even</span>) &#123; &#125;)</span><br><span class="line">even.<span class="title function_">preventDefault</span>()  <span class="comment">// 阻止默认行为 或者用 return false</span></span><br><span class="line">even.<span class="title function_">stopPropagation</span>()  <span class="comment">// 阻止冒泡</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式速查</title>
      <link href="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5/"/>
      <url>/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[        <h1 id="正则表达式"   >          <a href="#正则表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1>      <p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。</p><p>由于公式很多，所以很容易忘记，大致整理如下。<span id="more"></span></p>        <h2 id="基础正则表达式速查表"   >          <a href="#基础正则表达式速查表" class="heading-link"><i class="fas fa-link"></i></a><a href="#基础正则表达式速查表" class="headerlink" title="基础正则表达式速查表"></a>基础正则表达式速查表</h2>              <h3 id="字符"   >          <a href="#字符" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符" class="headerlink" title="字符"></a>字符</h3>      <div class="table-container"><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>[abc]</code></td><td align="center">匹配集合中所包含的任意字符。</td></tr><tr><td align="center"><code>[^abc]</code></td><td align="center">匹配任意不在集合中的字符。</td></tr><tr><td align="center"><code>[a-z]</code></td><td align="center">匹配指定范围内的任意字符。</td></tr><tr><td align="center"><code>.</code></td><td align="center">匹配除换行符以外的任何单个字符。</td></tr><tr><td align="center"><code>\</code></td><td align="center">转义字符</td></tr><tr><td align="center"><code>\w</code></td><td align="center">匹配任何字母数字，包括下划线（等价于<code>[A-Za-z0-9_]</code>）</td></tr><tr><td align="center"><code>\W</code></td><td align="center">匹配任何非字母数字（等价于<code>[^A-Za-z0-9_]</code>）</td></tr><tr><td align="center"><code>\d</code></td><td align="center">匹配任何数字</td></tr><tr><td align="center"><code>\D</code></td><td align="center">匹配任何非数字字符</td></tr><tr><td align="center"><code>\s</code></td><td align="center">匹配任何空白字符，包括空格、制表符等</td></tr><tr><td align="center"><code>\S</code></td><td align="center">匹配任何非空白字符</td></tr></tbody></table></div>        <h3 id="数量表示"   >          <a href="#数量表示" class="heading-link"><i class="fas fa-link"></i></a><a href="#数量表示" class="headerlink" title="数量表示"></a>数量表示</h3>      <div class="table-container"><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>?</code></td><td align="center">匹配前面的表达式0个或1个。即表示可选项。</td></tr><tr><td align="center"><code>+</code></td><td align="center">匹配前面的表达式至少1个。</td></tr><tr><td align="center"><code>*</code></td><td align="center">匹配前面的表达式0个或多个。</td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td></tr><tr><td align="center"><code>&#123;m&#125;</code></td><td align="center">匹配前面的表达式m个。</td></tr><tr><td align="center"><code>&#123;m,&#125;</code></td><td align="center">匹配前面的表达式最少m个。</td></tr><tr><td align="center"><code>&#123;m,n&#125;</code></td><td align="center">匹配前面的表达式最少m个，最多n个。</td></tr></tbody></table></div>        <h3 id="锚点和边界"   >          <a href="#锚点和边界" class="heading-link"><i class="fas fa-link"></i></a><a href="#锚点和边界" class="headerlink" title="锚点和边界"></a>锚点和边界</h3>      <div class="table-container"><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>^</code></td><td align="center">匹配字符串或行开头。</td></tr><tr><td align="center"><code>$</code></td><td align="center">匹配字符串或行结尾。</td></tr><tr><td align="center"><code>\b</code></td><td align="center">匹配单词边界。<code>QC\b</code>可以匹配<code>WorldmeQC</code>末尾的<code>QC</code></td></tr><tr><td align="center"><code>\B</code></td><td align="center">匹配非单词边界。<code>Worldme\B</code>可以匹配<code>HelloWorldmeQC</code>中的<code>Worldme</code></td></tr></tbody></table></div>        <h3 id="特殊标志"   >          <a href="#特殊标志" class="heading-link"><i class="fas fa-link"></i></a><a href="#特殊标志" class="headerlink" title="特殊标志"></a>特殊标志</h3>      <div class="table-container"><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>/.../i</code></td><td align="center">忽略大小写。</td></tr><tr><td align="center"><code>/.../g</code></td><td align="center">全局匹配。</td></tr><tr><td align="center"><code>/.../m</code></td><td align="center">多行修饰符。用于多行匹配。</td></tr></tbody></table></div>        <h3 id="预查断言"   >          <a href="#预查断言" class="heading-link"><i class="fas fa-link"></i></a><a href="#预查断言" class="headerlink" title="预查断言"></a>预查断言</h3>      <div class="table-container"><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>(?=)</code></td><td align="center">正向预查。比如<code>Hello(?=World)</code>能匹配<code>HelloWorld</code>中的<code>Hello</code>，但不能匹配<code>HelloPig</code>中的<code>Hello</code>。</td></tr><tr><td align="center"><code>(?!)</code></td><td align="center">正向否定预查。比如<code>Hello(?!World)</code>不能匹配<code>HelloWorld</code>中的<code>Hello</code>，但能匹配<code>HelloPig</code>中的<code>Hello</code>。</td></tr><tr><td align="center"><code>(?&lt;=)</code></td><td align="center">反向预查。比如<code>(?&lt;=Hello)World</code>能匹配<code>HelloWorld</code>中的<code>World</code>，但不能匹配<code>HiWorld</code>中的<code>World</code>。</td></tr><tr><td align="center"><code>(?&lt;!)</code></td><td align="center">反向否定预查。比如<code>(?&lt;!Hello)World</code>不能匹配<code>HelloWorld</code>中的<code>World</code>，但能匹配<code>HiWorld</code>中的<code>World</code>。</td></tr></tbody></table></div>        <h2 id="常用正则表达式"   >          <a href="#常用正则表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2>              <h3 id="数字校验"   >          <a href="#数字校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#数字校验" class="headerlink" title="数字校验"></a>数字校验</h3>      <div class="table-container"><table><thead><tr><th align="center">描述</th><th align="center">正则表达式</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">数字</td><td align="center"><code>^[0-9]*$</code></td><td align="center"></td></tr><tr><td align="center">n位数字</td><td align="center"><code>^\d&#123;n&#125;$</code></td><td align="center"></td></tr><tr><td align="center">至少n位数字</td><td align="center"><code>^\d&#123;n,&#125;$</code></td><td align="center"></td></tr><tr><td align="center">m~n位数字</td><td align="center"><code>^\d&#123;m,n&#125;$</code></td><td align="center"></td></tr><tr><td align="center">整数</td><td align="center"><code>^(-?[1-9]\d*)$</code></td><td align="center">非0开头，包括正整数和负整数</td></tr><tr><td align="center">正整数</td><td align="center"><code>^[1-9]\d*$</code></td><td align="center"></td></tr><tr><td align="center">负整数</td><td align="center"><code>^-[1-9]\d*$</code></td><td align="center"></td></tr><tr><td align="center">连续重复的数字</td><td align="center"><code>^(\d)\1+$</code></td><td align="center">例如：<code>111</code>，<code>222</code></td></tr></tbody></table></div>        <h3 id="字符校验"   >          <a href="#字符校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符校验" class="headerlink" title="字符校验"></a>字符校验</h3>      <div class="table-container"><table><thead><tr><th align="center"><strong>描述</strong></th><th align="center"><strong>正则表达式</strong></th><th align="center"><strong>备注</strong></th></tr></thead><tbody><tr><td align="center">中文</td><td align="center"><code>^[\u4E00-\u9FA5]+$</code></td><td align="center"></td></tr><tr><td align="center">全角字符</td><td align="center"><code>^[\uFF00-\uFFFF]+$</code></td><td align="center"></td></tr><tr><td align="center">半角字符</td><td align="center"><code>^[\u0000-\u00FF]+$</code></td><td align="center"></td></tr><tr><td align="center">英文字符串（大写）</td><td align="center"><code>^[A-Z]+$</code></td><td align="center"></td></tr><tr><td align="center">英文字符串（小写）</td><td align="center"><code>^[a-z]+$</code></td><td align="center"></td></tr><tr><td align="center">英文字符串（不区分大小写）</td><td align="center"><code>^[A-Za-z]+$</code></td><td align="center"></td></tr><tr><td align="center">英文和数字</td><td align="center"><code>^[A-Za-z0-9]+$</code></td><td align="center"></td></tr><tr><td align="center">数字、英文字母或者下划线组成的字符串</td><td align="center"><code>^\w+$</code></td><td align="center"></td></tr><tr><td align="center">中文、英文、数字包括下划线</td><td align="center"><code>^[\u4E00-\u9FA5\w]+$</code></td><td align="center"></td></tr><tr><td align="center">不含字母的字符串</td><td align="center"><code>^[^A-Za-z]*$</code></td><td align="center"></td></tr><tr><td align="center">连续重复的字符串</td><td align="center"><code>^(.)\1+$</code></td><td align="center">例如：<code>aa</code>，<code>bb</code></td></tr><tr><td align="center">长度为n的字符串</td><td align="center"><code>^.&#123;n&#125;$</code></td><td align="center"></td></tr><tr><td align="center">ASCII</td><td align="center"><code>^[ -~]$</code></td><td align="center"></td></tr></tbody></table></div>        <h3 id="日常生活校验"   >          <a href="#日常生活校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#日常生活校验" class="headerlink" title="日常生活校验"></a>日常生活校验</h3>      <div class="table-container"><table><thead><tr><th align="center">描述</th><th align="center">正则表达式</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">中文名</td><td align="center"><code>^[\u4E00-\u9FA5·]&#123;2,16&#125;$</code></td><td align="center"></td></tr><tr><td align="center">英文名</td><td align="center"><code>^[a-zA-Z][a-zA-Z\s]&#123;0,20&#125;[a-zA-Z]$</code></td><td align="center"></td></tr><tr><td align="center">车牌号</td><td align="center"><code>^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9挂学警港澳]$</code></td><td align="center">不含新能源</td></tr><tr><td align="center">火车车次</td><td align="center"><code>^[GCDZTSPKXLY1-9]\d&#123;1,4&#125;$</code></td><td align="center">例如：<code>G1234</code></td></tr><tr><td align="center">手机IMEI码</td><td align="center"><code>^\d&#123;15,17&#125;$</code></td><td align="center">一般是15位</td></tr><tr><td align="center">统一社会信用代码</td><td align="center"><code>^[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;$</code></td><td align="center"></td></tr><tr><td align="center">QQ号</td><td align="center"><code>^[1-9][0-9]&#123;4,&#125;$</code></td><td align="center">一般是5到10位</td></tr><tr><td align="center">微信号</td><td align="center"><code>^[a-zA-Z][-_a-zA-Z0-9]&#123;5,19&#125;$</code></td><td align="center">一般6~20位，字母开头，可包含字母、数字、-、_，不含特殊字符</td></tr></tbody></table></div>        <h3 id="互联网校验"   >          <a href="#互联网校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#互联网校验" class="headerlink" title="互联网校验"></a>互联网校验</h3>      <div class="table-container"><table><thead><tr><th align="center">描述</th><th align="center">**正则表达式</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">域名</td><td align="center"><code>^[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(?:\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+$</code></td><td align="center">例如：<code>worldmeqc.top</code></td></tr><tr><td align="center">网址</td><td align="center"><code>^(?:https?:\/\/)?[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(?:\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+$</code></td><td align="center">例如：<code>https://www.worldmeqc.top/</code></td></tr><tr><td align="center">带端口号的网址(或IP)</td><td align="center"><code>^(?:https?:\/\/)?[\w-]+(?:\.[\w-]+)+:\d&#123;1,5&#125;\/?$</code></td><td align="center">例如：<code>http://127.0.0.1:8888/</code></td></tr><tr><td align="center">URL</td><td align="center"><code>^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]&#123;1,256&#125;\.[a-zA-Z0-9()]&#123;1,6&#125;\b(?:[-a-zA-Z0-9()!@:%_\+.~#?&amp;\/\/=]*)$</code></td><td align="center">例如：<code>https://www.worldmeqc..top/</code></td></tr><tr><td align="center">邮箱email</td><td align="center"><code>^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(?:\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+$</code></td><td align="center">支持中文，例如：<code>worldmeqc@163.com</code></td></tr><tr><td align="center">用户名</td><td align="center"><code>^[a-zA-Z0-9_-]&#123;4,20&#125;$</code></td><td align="center">4到20位</td></tr></tbody></table></div>        <h2 id="可视化工具"   >          <a href="#可视化工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2>      <div>请输入正则表达式：  <input type="text" autocomplete="off" id="regexInput" placeholder="请在此输入或粘贴正则表达式" style="width:50%">  <button onclick="var text=document.getElementById('regexInput').value;window.open('https://jex.im/regulex/#!embed=true&flags=&re='+text,'正则表达式可视化工具')">可视化查看</button></div>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios的使用指南</title>
      <link href="/2022/07/27/Axios%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/27/Axios%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[        <h1 id="Axios-的使用指南"   >          <a href="#Axios-的使用指南" class="heading-link"><i class="fas fa-link"></i></a><a href="#Axios-的使用指南" class="headerlink" title="Axios 的使用指南"></a>Axios 的使用指南</h1>              <h2 id="什么是Axios？"   >          <a href="#什么是Axios？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是Axios？" class="headerlink" title="什么是Axios？"></a>什么是Axios？</h2>      <p>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范。<span id="more"></span><br>axios面向现代浏览器设计，所以古老的浏览器并不支持。<br>因为axios设计简洁，API简单，支持浏览器和node，所以大受欢迎。它能很好的与各种前端框架整合。</p>        <h2 id="它有哪些特性？"   >          <a href="#它有哪些特性？" class="heading-link"><i class="fas fa-link"></i></a><a href="#它有哪些特性？" class="headerlink" title="它有哪些特性？"></a>它有哪些特性？</h2>      <ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul>        <h1 id="安装"   >          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装" class="headerlink" title="安装"></a>安装</h1>      <p>使用npm：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></div></figure><p>使用 bower:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></div></figure><p>使用 cdn:</p><figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h1 id="使用指南"   >          <a href="#使用指南" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1>              <h2 id="GET请求"   >          <a href="#GET请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#GET请求" class="headerlink" title="GET请求"></a><code>GET</code>请求</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></div></figure>        <h2 id="POST-请求"   >          <a href="#POST-请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></div></figure>        <h2 id="配置方式创建请求"   >          <a href="#配置方式创建请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置方式创建请求" class="headerlink" title="配置方式创建请求"></a>配置方式创建请求</h2>              <h3 id="axios-config"   >          <a href="#axios-config" class="heading-link"><i class="fas fa-link"></i></a><a href="#axios-config" class="headerlink" title="axios(config)"></a>axios(config)</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 发送 GET 请求 获取远端图片</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;http://bit.ly/2mTM3nY&#x27;</span>,</span><br><span class="line">  <span class="attr">responseType</span>:<span class="string">&#x27;stream&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;ada_lovelace.jpg&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h3 id="axios-url-config"   >          <a href="#axios-url-config" class="heading-link"><i class="fas fa-link"></i></a><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a>axios(url[, config])</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line"><span class="title function_">axios</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br></pre></td></tr></table></div></figure>        <h1 id="请求配置文件"   >          <a href="#请求配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求配置文件" class="headerlink" title="请求配置文件"></a>请求配置文件</h1>      <p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code> 方法。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` indicates encoding to use for decoding responses</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; to send requests to the docker daemon.</span></span><br><span class="line">  <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">  <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="配置默认值"   >          <a href="#配置默认值" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h1>      <p>你可以指定将被用在各个请求的配置默认值</p>        <h2 id="全局的-axios-默认值"   >          <a href="#全局的-axios-默认值" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="自定义实例默认值"   >          <a href="#自定义实例默认值" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set config defaults when creating the instance</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alter defaults after instance has been created</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="配置的优先顺序"   >          <a href="#配置的优先顺序" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a>配置的优先顺序</h2>      <p>配置会以一个优先顺序进行合并。这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。这里是一个例子：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/longRequest&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h1 id="拦截器"   >          <a href="#拦截器" class="heading-link"><i class="fas fa-link"></i></a><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1>      <p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></div></figure><p>如果你想在稍后移除拦截器，可以这样：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(myInterceptor);</span><br></pre></td></tr></table></div></figure><p>可以为自定义 axios 实例添加拦截器</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></div></figure>        <h1 id="vue-axios"   >          <a href="#vue-axios" class="heading-link"><i class="fas fa-link"></i></a><a href="#vue-axios" class="headerlink" title="vue-axios"></a>vue-axios</h1>      <p>基于vuejs 的轻度封装</p>        <h2 id="安装-1"   >          <a href="#安装-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></div></figure><p>将下面代码加入入口文件:</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueAxios</span> <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAxios</span>, axios)</span><br></pre></td></tr></table></div></figure>        <h2 id="引入顺序"   >          <a href="#引入顺序" class="heading-link"><i class="fas fa-link"></i></a><a href="#引入顺序" class="headerlink" title="引入顺序"></a>引入顺序</h2>      <p>按照这个顺序分别引入这三个文件： <code>vue</code>, <code>axios</code> and <code>vue-axios</code></p>        <h2 id="使用指南-1"   >          <a href="#使用指南-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用指南-1" class="headerlink" title="使用指南"></a>使用指南</h2>      <p>如果您使用的是单文件组件，那么包装器会将“axios”绑定到“Vue”或“this”。</p><p>你可以按照以下方式使用:</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">axios</span>.<span class="title function_">get</span>(api).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">get</span>(api).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(api).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> axios </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to my home</title>
      <link href="/2022/07/20/Welcome/"/>
      <url>/2022/07/20/Welcome/</url>
      
        <content type="html"><![CDATA[        <h2 id="欢迎来到WorldmeQC"   >          <a href="#欢迎来到WorldmeQC" class="heading-link"><i class="fas fa-link"></i></a><a href="#欢迎来到WorldmeQC" class="headerlink" title="欢迎来到WorldmeQC"></a>欢迎来到WorldmeQC</h2>      <p>欢迎来到我的小窝！这是我的第一篇博客，以后会经常在此更新学习笔记。<br>欢迎各位交换友链，有任何问题都可以右边找到我的联系方式！</p>]]></content>
      
      
      <categories>
          
          <category> Welcome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
